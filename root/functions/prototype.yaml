syntax:
  signatures:
    - jam.prototype(blueprint)

  returns: Function
  parameters:
    blueprint: An object that has several optional properties.

synopsis: Generates a constructor function that returns a new instance of the specified prototype.

overview: |
  `jam.prototype()` takes an object (`blueprint`) that defines how the prototype will be implemented.
  
  ## constructor function

  `blueprint.constructor` is a function whose parameters are the arguments given on instantiation. If
  this prototype has a superclass, the first parameter is a reference to the superclass'
  constructor function, so base classes may be correctly constructed. This function does not need
  to return `this` - any return value is ignored. `constructor` is optional.


  ``` javascript
  var Dragon = jam.prototype({
    constructor: function(name, age) {
      this.name = name;
      this.age = age;
    }
  });

  var henry = Dragon("Henry", 21);
  // 'new' is optional, but allowed
  var oliver = new Dragon("Oliver", 27);
  ```

  ## methods

  `blueprint.methods` is a map, where each key is the name of a method to be defined upon the
  prototype. Each value is the method definition. Method names beginning with an underscore are
  considered "private", and are created as non-enumerable, non-writable, and non-configurable. Of
  course, there is no such thing as encapsulation in JavaScript, so users can still call these
  methods. But we hope they don't.

  ``` javascript
  var Dragon = jam.prototype({
    methods: {
      roar: function() {
        console.log("RAWR");
      },

      _complain: function() {
        console.log("Roaring like that hurts my throat");
      }
    }
  });

  var mortimer = Dragon();
  mortimer.roar();
  ```

  ## accessors

  Javascript 1.8.5 introduced accessors.
  <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty>
  `Object.defineProperty`</a> can be used to create both  _data descriptors_ and _accessor _descriptors_.
  `blueprint.accessors` creates accessor descriptors: The key is the name of the properties to create, and the
  value helps specify the accessor(s). Entires in `blueprint.accessors` can take two forms: A `simple` form, and
  a `complete` form. The simple form is a Function. This represents an accessor with only a `get` function (the
  majority of accessors). The complete form is an object that has both `get` and `set` properties.

  ``` javascript
  var Dragon = jam.prototype({

    constructor: function(name, hitpoints) {
      this._name = name;
      this._hitpoints = hitpoints;
    },

    accessors: {
      // simple form.
      // an accessor for an internal member
      name: function() { return this._name; }

      // complete form.
      // an accessor with a basic getter, and with a
      // setter that ensures the hitpoints don't go below zero.
      hitpoints: {
        get: function() { return this._hitpoints; }
        set: function(value) {
          this._hitpoints = Math.max(0, value);
        }
      }
    }
  });
  ```

