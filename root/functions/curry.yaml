syntax:
  signatures:
    - jam.curry(fn, a1, a2, ... aN)

  returns: Function
  parameters:
    fn: The function we are going to curry

    "a1 through aN":
      display-name: a1, a2, ... aN
      description: |
        A _directive_, consisting of either a non-undefined value, a numbered placeholder, or a
        non-numbered placeholder.

synopsis: Curries a function

usage: |
  The first parameter is the function you wish to curry.

  All subsequent parameters are considered _directives_: A numbered placeholder (`_1`, `_2`, etc),
  a non-numbered placeholder (`_`), or any non-undefined value. This bears repeating - `jam.curry`
  does _not_ play nice with `undefined` as arguments.

overview: |
  ## non-numbered placeholders

  `jam.curry`, in its simplest form, uses only non-numbered placeholders. A non-numbered placeholder
  is by default an underscore (`_`), defined in the global namespace. This is configurable, as
  some libraries use the underscore as the entry point to their API (in this author's opition, a
  terrible idea). Configuration is detailed later in this article. The following demonstrates the
  use of non-numbered placeholders (using the default underscore):

  ``` javascript
  function sub_x_y(x, y) { return x - y; }

  // curry
  var sub_x_1 = jam.curry(sub_x_y, _, 1);

  sub_x_1(4); // equals 3
  ```

  Furthermore, trailing non-numbered placeholders can simply be truncated:

  ``` javascript
  // trailing non-numbered placeholder
  var sub_8_y = jam.curry(sub_x_y, 8, _);

  // truncated, same as previous line
  sub_8_y = jam.curry(sub_x_y, 8);

  sub_8_y(2); // equals 6
  ```

  Finally, function calls that take a variable number of parameters work, as all non-consumed arguments
  are appended to the end:

  ``` javascript
  function sum_everything() {
    var result = 0;
    Array.prototype.forEach.call(arguments, function(x) {
      result += x;
    });
    return result;
  }

  var sum_everything_and_12 = jam.curry(sum_everything, 12)

  sum_everything_and_12(1, 2, 3, 4); // equals 22
  ```

  ## numbered placeholders

  A numbered placeholder is a variable, defined in the global scope, of type `jam.placeholder`. It
  takes the form of an underscore followed by a number, like `_1`, `_2`, `_3`, etc. Numbered
  placeholders allow us to change the order that arguments are passed to the curried function. It's
  especially helpful to reverse predicates:

  ``` javascript
  function predicate(lhs, rhs) { return lhs < rhs; }
  var reversed_predicate = jam.curry(predicate, _2, _1);

  predicate(1, 2); // true
  predicate(2, 1); // false
  reversed_predicate(2, 1); // true
  reversed_predicate(1, 2); // false
  ```

  The first limitation of numbered placeholders is that they must be contiguous as a whole.
  That is to say, you can't skip a number within all the numbered placeholders. This is a logical
  limitation, due to the aforementioned fact that all non-consumed arguments are appended to the
  function call. `jam.curry(fn, _1, _4, _2)` is ill-defined: We can not tell whether or not to append
  the third parameter or ignore it, and so an error is born. To clarify, `jam.curry(fn, _1, _3, _2)`
  is totally fine. `_1` to `_3` may not be contiguous, but as a _whole_, it is not missing any numbers.

  The other strict limitation of using numbered placeholders is that their use is not allowed after
  the use of non-numbered placeholders. However, non-numbered placeholders are allowed afterwards.
  `jam.curry(fn, _3, "elephant", _1, _2, _, _, "giraffe")` is a valid use of `jam.curry`.